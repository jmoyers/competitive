"""
---
number:443
title:String Compression
difficulty:easy
tags:
- parsing
- compression
- in-place
links:
- https://leetcode.com/problems/string-compression/
---
Given an array of characters, compress it in-place.

The length after compression must always be smaller than or equal to the original array.

Every element of the array should be a character (not int) of length 1.

After you are done modifying the input array in-place, return the new length of the array.

 
Follow up:
Could you solve it using only O(1) extra space?

 
Example 1:

Input:
["a","a","b","b","c","c","c"]

Output:
Return 6, and the first 6 characters of the input array should be: ["a","2","b","2","c","3"]

Explanation:
"aa" is replaced by "a2". "bb" is replaced by "b2". "ccc" is replaced by "c3".
 

Example 2:

Input:
["a"]

Output:
Return 1, and the first 1 characters of the input array should be: ["a"]

Explanation:
Nothing is replaced.
 

Example 3:

Input:
["a","b","b","b","b","b","b","b","b","b","b","b","b"]

Output:
Return 4, and the first 4 characters of the input array should be: ["a","b","1","2"].

Explanation:
Since the character "a" does not repeat, it is not compressed. "bbbbbbbbbbbb" is replaced by "b12".
Notice each digit has it's own entry in the array.
 

Note:

All characters have an ASCII value in [35, 126].
1 <= len(chars) <= 1000.
"""
from typing import List


class Solution:
    def compress(self, chars: List[str]) -> int:
        last, start, i = None, None, 0

        while i < len(chars):
            if last == chars[i] and not start:
                start = i
            if last != chars[i] and start:
                rep = list(str(i - start + 1))
                chars[start:i] = rep
                i = start + len(rep)
                start = None

            last = chars[i]
            i += 1

        if start:
            chars[start : len(chars)] = list(str(len(chars) - start + 1))

        return len(chars)


def test_lc1():
    inp = ["a", "a", "a", "b", "b", "a", "a"]
    result = Solution().compress(inp)
    assert inp == ["a", "3", "b", "2", "a", "2"]


def test_lc2():
    inp = [
        "b",
        "l",
        "l",
        "l",
        "l",
        "l",
        "l",
        "4",
        "4",
        "W",
        "W",
        "&",
        "d",
        "d",
        "d",
        "@",
        "D",
        "D",
        ".",
        ".",
        ".",
        "8",
        "8",
        "8",
        "U",
        "V",
        ">",
        "J",
        "J",
        "k",
        "H",
        "H",
        "=",
        "l",
        "[",
        "[",
        "[",
        "[",
        "[",
        "[",
        "[",
        "a",
        "a",
        "'",
        "<",
        "[",
        "[",
        "y",
        "V",
        "l",
        "l",
        "'",
        "$",
        "E",
        "`",
        "v",
        "k",
        "E",
        "E",
        "t",
        "t",
        "t",
        "t",
        "t",
        "=",
        "=",
        "0",
        "C",
        "a",
        "l",
        "l",
        "l",
        "r",
        "R",
        "M",
        "M",
        "c",
        "c",
        "c",
        "A",
        "A",
        "S",
        "9",
        "9",
        "9",
        "9",
        ")",
        ")",
        "\\",
        "s",
        "\\",
        "\\",
        "y",
        "W",
        "W",
        "W",
        "J",
        "J",
        "J",
        "J",
        "6",
        "6",
        "<",
        "<",
        "E",
        "u",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "e",
        "9",
        "9",
        "9",
        "9",
        "R",
        "8",
        "?",
        "F",
        "3",
        "&",
        "&",
        "&",
        "&",
        "f",
        "%",
        "%",
        "2",
        "2",
        "2",
        ")",
        ")",
        ")",
        "J",
        "p",
        "|",
        "D",
        "D",
        "D",
        "s",
        "t",
        "V",
        "V",
        "?",
        "^",
        "^",
        "S",
        "3",
        "3",
        "3",
        "3",
        "h",
        "*",
        "|",
        "|",
        "b",
        "b",
        "a",
        "a",
        "a",
        "r",
        "r",
        "r",
        "r",
        "J",
        ".",
        "^",
        "^",
        "~",
        "g",
        ":",
        ":",
        ":",
        "(",
        "4",
        "4",
        "4",
        "4",
        "w",
        "w",
        "w",
        "w",
        "w",
        "w",
        "w",
        "C",
        "?",
        "=",
        "d",
        "L",
        ":",
        "0",
        "0",
        "c",
        "w",
        "w",
        "w",
        "w",
        "w",
        "w",
        "{",
        "{",
        "t",
        "k",
        "k",
        "k",
        "&",
        "&",
        "&",
        "h",
        "j",
        "j",
        "j",
        "0",
        "3",
        "l",
        ";",
        ";",
        ";",
        ";",
        ";",
        ".",
        ".",
        ".",
        "%",
        "1",
        "1",
        "1",
        "l",
        "9",
        "?",
        "?",
        "?",
        "t",
        ">",
        "E",
        "N",
        "N",
        "@",
        ">",
        ".",
        ".",
        "I",
        "a",
        "a",
        "a",
        "a",
        "B",
        "7",
        "7",
        "{",
        "o",
        "o",
        "-",
        "+",
        "+",
        "+",
        "+",
        "o",
        "o",
        "}",
        "B",
        "B",
        "r",
        "r",
        "r",
        "q",
        "4",
        "4",
        "4",
        "9",
        "W",
        "W",
        "W",
        "W",
        "W",
        "'",
        "'",
        "'",
        "g",
        "J",
        "(",
        "(",
        "(",
        "(",
        "t",
        "t",
        "?",
        ";",
        "g",
        "g",
        "g",
        "0",
        "]",
        "]",
        "]",
    ]

    result = [
        "b",
        "l",
        "6",
        "4",
        "2",
        "W",
        "2",
        "&",
        "d",
        "3",
        "@",
        "D",
        "2",
        ".",
        "3",
        "8",
        "3",
        "U",
        "V",
        ">",
        "J",
        "2",
        "k",
        "H",
        "2",
        "=",
        "l",
        "[",
        "7",
        "a",
        "2",
        "'",
        "<",
        "[",
        "2",
        "y",
        "V",
        "l",
        "2",
        "'",
        "$",
        "E",
        "`",
        "v",
        "k",
        "E",
        "2",
        "t",
        "5",
        "=",
        "2",
        "0",
        "C",
        "a",
        "l",
        "3",
        "r",
        "R",
        "M",
        "2",
        "c",
        "3",
        "A",
        "2",
        "S",
        "9",
        "4",
        ")",
        "2",
        "\\",
        "s",
        "\\",
        "2",
        "y",
        "W",
        "3",
        "J",
        "4",
        "6",
        "2",
        "<",
        "2",
        "E",
        "u",
        "e",
        "9",
        "9",
        "4",
        "R",
        "8",
        "?",
        "F",
        "3",
        "&",
        "4",
        "f",
        "%",
        "2",
        "2",
        "3",
        ")",
        "3",
        "J",
        "p",
        "|",
        "D",
        "3",
        "s",
        "t",
        "V",
        "2",
        "?",
        "^",
        "2",
        "S",
        "3",
        "4",
        "h",
        "*",
        "|",
        "2",
        "b",
        "2",
        "a",
        "3",
        "r",
        "4",
        "J",
        ".",
        "^",
        "2",
        "~",
        "g",
        ":",
        "3",
        "(",
        "4",
        "4",
        "w",
        "7",
        "C",
        "?",
        "=",
        "d",
        "L",
        ":",
        "0",
        "2",
        "c",
        "w",
        "6",
        "{",
        "2",
        "t",
        "k",
        "3",
        "&",
        "3",
        "h",
        "j",
        "3",
        "0",
        "3",
        "l",
        ";",
        "5",
        ".",
        "3",
        "%",
        "1",
        "3",
        "l",
        "9",
        "?",
        "3",
        "t",
        ">",
        "E",
        "N",
        "2",
        "@",
        ">",
        ".",
        "2",
        "I",
        "a",
        "4",
        "B",
        "7",
        "2",
        "{",
        "o",
        "2",
        "-",
        "+",
        "4",
        "o",
        "2",
        "}",
        "B",
        "2",
        "r",
        "3",
        "q",
        "4",
        "3",
        "9",
        "W",
        "5",
        "'",
        "3",
        "g",
        "J",
        "(",
        "4",
        "t",
        "2",
        "?",
        ";",
        "g",
        "3",
        "0",
        "]",
        "3",
    ]

    Solution().compress(inp)

    assert inp == result

